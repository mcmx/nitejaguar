// Code generated by ent, DO NOT EDIT.

package workflow

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/mcmx/nitejaguar/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldID, id))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldEnabled, v))
}

// JSONDefinition applies equality check predicate on the "json_definition" field. It's identical to JSONDefinitionEQ.
func JSONDefinition(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldJSONDefinition, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldUpdatedAt, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldEnabled, v))
}

// JSONDefinitionEQ applies the EQ predicate on the "json_definition" field.
func JSONDefinitionEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldJSONDefinition, v))
}

// JSONDefinitionNEQ applies the NEQ predicate on the "json_definition" field.
func JSONDefinitionNEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldJSONDefinition, v))
}

// JSONDefinitionIn applies the In predicate on the "json_definition" field.
func JSONDefinitionIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldJSONDefinition, vs...))
}

// JSONDefinitionNotIn applies the NotIn predicate on the "json_definition" field.
func JSONDefinitionNotIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldJSONDefinition, vs...))
}

// JSONDefinitionGT applies the GT predicate on the "json_definition" field.
func JSONDefinitionGT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldJSONDefinition, v))
}

// JSONDefinitionGTE applies the GTE predicate on the "json_definition" field.
func JSONDefinitionGTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldJSONDefinition, v))
}

// JSONDefinitionLT applies the LT predicate on the "json_definition" field.
func JSONDefinitionLT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldJSONDefinition, v))
}

// JSONDefinitionLTE applies the LTE predicate on the "json_definition" field.
func JSONDefinitionLTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldJSONDefinition, v))
}

// JSONDefinitionContains applies the Contains predicate on the "json_definition" field.
func JSONDefinitionContains(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContains(FieldJSONDefinition, v))
}

// JSONDefinitionHasPrefix applies the HasPrefix predicate on the "json_definition" field.
func JSONDefinitionHasPrefix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasPrefix(FieldJSONDefinition, v))
}

// JSONDefinitionHasSuffix applies the HasSuffix predicate on the "json_definition" field.
func JSONDefinitionHasSuffix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasSuffix(FieldJSONDefinition, v))
}

// JSONDefinitionEqualFold applies the EqualFold predicate on the "json_definition" field.
func JSONDefinitionEqualFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldJSONDefinition, v))
}

// JSONDefinitionContainsFold applies the ContainsFold predicate on the "json_definition" field.
func JSONDefinitionContainsFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldJSONDefinition, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(sql.NotPredicates(p))
}
